{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///parse-curl-js.js","webpack:///webpack/bootstrap dde015848d66e6b88455","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","parse","command","parsedCommand","url","isACurlCommand","match","optionsRegex","forEach","val","option","removeLeadingTrailingQuotes","isAUrlOption","_parseUrlOption","parseUrlOption","queryStrings","isAHeaderOption","_parseOptionValue","parseOptionValue","key","value","headers","isDataOption","body","parseBody","console","log","parseBodyByContentType","urlRegex","isMatchingOption","str","length","startsWith","quotes","newStr","trim","includes","substr","subStrFrom","startFromVal","dataPosition","indexOf","isJsonRequest","_ref","cleanedBodyData","replace","JSON","ex","message","headerSplit","split","parseQueryStrings","paramPosition","param","splitParam","urlMatches","default"],"mappings":"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","file":"parse-curl-js.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"parse_curl_js\"] = factory();\n\telse\n\t\troot[\"parse_curl_js\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"parse_curl_js\"] = factory();\n\telse\n\t\troot[\"parse_curl_js\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = parse;\nvar optionsRegex = /(--[a-zA-Z\\-]+ '.*?')|(--[a-zA-Z\\-]+)|(-[a-zA-Z\\-]+? '.+?')|('?[a-z]+:\\/\\/.*?'+?)|(\"?[a-z]+:\\/\\/.*?\"+?)/g; // eslint-disable-line\nvar urlRegex = /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/; // eslint-disable-line\n\nvar contentTypeHeader = 'content-type';\nvar jsonMimeType = 'application/json';\n\nvar isMatchingOption = function isMatchingOption(headers, str) {\n  for (var i = 0; i < headers.length; i += 1) {\n    if (str.startsWith(headers[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvar isAHeaderOption = function isAHeaderOption(str) {\n  return isMatchingOption(['-H ', '--headers '], str);\n};\nvar isDataOption = function isDataOption(str) {\n  return isMatchingOption(['--data ', '--data-ascii ', '-d ', '--data-raw ', '--dta-urlencode ', '--data-binary '], str);\n};\n\nvar removeLeadingTrailingQuotes = function removeLeadingTrailingQuotes(str) {\n  var quotes = ['\\'', '\"'];\n  var newStr = str.trim();\n  return quotes.includes(newStr[0]) ? newStr.substr(1, newStr.length - 2) : newStr;\n};\n\nvar subStrFrom = function subStrFrom(val, startFromVal) {\n  var dataPosition = val.indexOf(startFromVal);\n  return val.substr(dataPosition);\n};\n\nvar isJsonRequest = function isJsonRequest(parsedCommand) {\n  return parsedCommand.headers[contentTypeHeader] && parsedCommand.headers[contentTypeHeader].indexOf(jsonMimeType) !== -1;\n};\n\nvar parseBodyByContentType = function parseBodyByContentType(_ref) {\n  var body = _ref.body,\n      headers = _ref.headers;\n\n  if (body && isJsonRequest(headers)) {\n    try {\n      var cleanedBodyData = body.replace('\\\\\"', '\"').replace(\"\\\\'\", \"'\");\n      return JSON.parse(cleanedBodyData);\n    } catch (ex) {\n      // ignore json conversion error..\n      console.log('Cannot parse JSON Data ' + ex.message); // eslint-disable-line\n    }\n  }\n  return body;\n};\n\nvar parseOptionValue = function parseOptionValue(val) {\n  var headerSplit = subStrFrom(val, ' ').split(':');\n  return {\n    key: headerSplit[0].trim(),\n    value: headerSplit[1].trim()\n  };\n};\n\nvar parseQueryStrings = function parseQueryStrings(url) {\n  var paramPosition = url.indexOf('?');\n  var queryStrings = {};\n  if (paramPosition !== -1) {\n    // const splitUrl = parsedCommand.url.substr(0, paramPosition);\n    var paramsString = url.substr(paramPosition + 1);\n    var params = paramsString.split('&') || [];\n\n    params.forEach(function (param) {\n      var splitParam = param.split('='); // eslint-disable-line\n      queryStrings[splitParam[0]] = splitParam[1]; // eslint-disable-line\n    });\n  }\n  return queryStrings;\n};\n\nvar parseUrlOption = function parseUrlOption(val) {\n  var urlMatches = val.match(urlRegex) || [];\n  if (urlMatches.length) {\n    var url = urlMatches[0]; // eslint-disable-line\n    return {\n      url: url,\n      queryStrings: parseQueryStrings(url)\n    };\n  }\n  return { url: '', queryStrings: {} };\n};\n\nvar parseBody = function parseBody(val) {\n  return removeLeadingTrailingQuotes(subStrFrom(val, ' '));\n};\n\nvar isACurlCommand = function isACurlCommand(val) {\n  return val.trim().startsWith('curl ');\n};\nvar isAUrlOption = function isAUrlOption(val) {\n  var matches = val.match(urlRegex) || [];\n  return !!matches.length;\n};\n\n/*\n * Parse cUrl command to a JSON structure\n * params:\n * command - cUrl command as a string.\n * return JSON object\n*/\nfunction parse(command) {\n  if (!command) {\n    return '';\n  }\n\n  var parsedCommand = {\n    url: ''\n  };\n\n  // quit if the command does not starts with curl\n  if (isACurlCommand(command)) {\n    var matches = command.match(optionsRegex);\n    matches.forEach(function (val) {\n      var option = removeLeadingTrailingQuotes(val);\n      if (isAUrlOption(option)) {\n        var _parseUrlOption = parseUrlOption(option),\n            url = _parseUrlOption.url,\n            queryStrings = _parseUrlOption.queryStrings;\n\n        parsedCommand.url = url;\n        parsedCommand.queryStrings = queryStrings;\n      } else if (isAHeaderOption(option)) {\n        var _parseOptionValue = parseOptionValue(option),\n            key = _parseOptionValue.key,\n            value = _parseOptionValue.value;\n\n        parsedCommand.headers = parsedCommand.headers || {};\n        parsedCommand.headers[key] = value;\n      } else if (isDataOption(option)) {\n        parsedCommand.body = parseBody(option);\n      } else {\n        console.log('Skipped Header ' + val); // eslint-disable-line\n      }\n    }); // parse over matches ends\n\n    // should be checked after all the options are analyzed\n    // so that we guarentee that we have content-type header\n    parsedCommand.body = parseBodyByContentType(parsedCommand);\n  }\n\n  return parsedCommand;\n}\n\nexports.default = parse;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// parse-curl-js.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap dde015848d66e6b88455","const optionsRegex = /(--[a-zA-Z\\-]+ '.*?')|(--[a-zA-Z\\-]+)|(-[a-zA-Z\\-]+? '.+?')|('?[a-z]+:\\/\\/.*?'+?)|(\"?[a-z]+:\\/\\/.*?\"+?)/g; // eslint-disable-line\nconst urlRegex = /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/; // eslint-disable-line\n\nconst contentTypeHeader = 'content-type';\nconst jsonMimeType = 'application/json';\n\nconst isMatchingOption = (headers, str) => {\n  for (let i = 0; i < headers.length; i += 1) {\n    if (str.startsWith(headers[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst isAHeaderOption = str => isMatchingOption(['-H ', '--headers '], str);\nconst isDataOption = str => isMatchingOption(['--data ', '--data-ascii ', '-d ', '--data-raw ', '--dta-urlencode ', '--data-binary '], str);\n\nconst removeLeadingTrailingQuotes = (str) => {\n  const quotes = ['\\'', '\"'];\n  const newStr = str.trim();\n  return quotes.includes(newStr[0]) ? newStr.substr(1, newStr.length - 2) : newStr;\n};\n\nconst subStrFrom = (val, startFromVal) => {\n  const dataPosition = val.indexOf(startFromVal);\n  return val.substr(dataPosition);\n};\n\nconst isJsonRequest = parsedCommand => (parsedCommand.headers[contentTypeHeader] &&\n  parsedCommand.headers[contentTypeHeader].indexOf(jsonMimeType) !== -1);\n\nconst parseBodyByContentType = ({ body, headers }) => {\n  if (body && isJsonRequest(headers)) {\n    try {\n      const cleanedBodyData = body.replace('\\\\\"', '\"').replace(\"\\\\'\", \"'\");\n      return JSON.parse(cleanedBodyData);\n    } catch (ex) {\n      // ignore json conversion error..\n      console.log('Cannot parse JSON Data ' + ex.message); // eslint-disable-line\n    }\n  }\n  return body;\n};\n\nconst parseOptionValue = (val) => {\n  const headerSplit = subStrFrom(val, ' ').split(':');\n  return {\n    key: headerSplit[0].trim(),\n    value: headerSplit[1].trim(),\n  };\n};\n\nconst parseQueryStrings = (url) => {\n  const paramPosition = url.indexOf('?');\n  const queryStrings = {};\n  if (paramPosition !== -1) {\n    // const splitUrl = parsedCommand.url.substr(0, paramPosition);\n    const paramsString = url.substr(paramPosition + 1);\n    const params = paramsString.split('&') || [];\n\n    params.forEach((param) => {\n          const splitParam = param.split('='); // eslint-disable-line\n          queryStrings[splitParam[0]] = splitParam[1]; // eslint-disable-line\n    });\n  }\n  return queryStrings;\n};\n\nconst parseUrlOption = (val) => {\n  const urlMatches = val.match(urlRegex) || [];\n  if (urlMatches.length) {\n    const url = urlMatches[0]; // eslint-disable-line\n    return {\n      url,\n      queryStrings: parseQueryStrings(url),\n    };\n  }\n  return { url: '', queryStrings: {} };\n};\n\nconst parseBody = val => removeLeadingTrailingQuotes(subStrFrom(val, ' '));\n\nconst isACurlCommand = val => val.trim().startsWith('curl ');\nconst isAUrlOption = (val) => {\n  const matches = val.match(urlRegex) || [];\n  return !!matches.length;\n};\n\n/*\n * Parse cUrl command to a JSON structure\n * params:\n * command - cUrl command as a string.\n * return JSON object\n*/\nexport function parse(command) {\n  if (!command) { return ''; }\n\n  const parsedCommand = {\n    url: '',\n  };\n\n  // quit if the command does not starts with curl\n  if (isACurlCommand(command)) {\n    const matches = command.match(optionsRegex);\n    matches.forEach((val) => {\n      const option = removeLeadingTrailingQuotes(val);\n      if (isAUrlOption(option)) {\n        const { url, queryStrings } = parseUrlOption(option);\n        parsedCommand.url = url;\n        parsedCommand.queryStrings = queryStrings;\n      } else if (isAHeaderOption(option)) {\n        const { key, value } = parseOptionValue(option);\n        parsedCommand.headers = parsedCommand.headers || {};\n        parsedCommand.headers[key] = value;\n      } else if (isDataOption(option)) {\n        parsedCommand.body = parseBody(option);\n      } else {\n        console.log(`Skipped Header ${val}`); // eslint-disable-line\n      }\n    }); // parse over matches ends\n\n    // should be checked after all the options are analyzed\n    // so that we guarentee that we have content-type header\n    parsedCommand.body = parseBodyByContentType(parsedCommand);\n  }\n\n  return parsedCommand;\n}\n\nexport default parse;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}